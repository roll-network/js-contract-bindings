/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestContractInterface extends ethers.utils.Interface {
  functions: {
    "getValue()": FunctionFragment;
    "setValue(uint256)": FunctionFragment;
    "testEvent()": FunctionFragment;
    "testRequire(bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "testEvent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testRequire",
    values: [boolean]
  ): string;

  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testRequire",
    data: BytesLike
  ): Result;

  events: {
    "EventCool(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventCool"): EventFragment;
}

export type EventCoolEvent = TypedEvent<
  [string, BigNumber] & { from: string; id: BigNumber }
>;

export class TestContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestContractInterface;

  functions: {
    getValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    setValue(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testEvent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRequire(abort: boolean, overrides?: CallOverrides): Promise<[void]>;
  };

  getValue(overrides?: CallOverrides): Promise<BigNumber>;

  setValue(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testEvent(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRequire(abort: boolean, overrides?: CallOverrides): Promise<void>;

  callStatic: {
    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    setValue(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testEvent(overrides?: CallOverrides): Promise<void>;

    testRequire(abort: boolean, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EventCool(address,uint256)"(
      from?: string | null,
      id?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; id: BigNumber }>;

    EventCool(
      from?: string | null,
      id?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; id: BigNumber }>;
  };

  estimateGas: {
    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    setValue(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testEvent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRequire(abort: boolean, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setValue(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testEvent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRequire(
      abort: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
