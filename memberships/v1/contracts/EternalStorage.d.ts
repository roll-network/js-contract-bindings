/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EternalStorageInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "WRITER_ROLE()": FunctionFragment;
    "addCampaign((bytes32,bytes32[],string))": FunctionFragment;
    "campaignsByAddress(address,uint256)": FunctionFragment;
    "campaignsCreatedByAddress(address)": FunctionFragment;
    "getBuyPerWallet(bytes32,address)": FunctionFragment;
    "getBuyWalletCount(bytes32)": FunctionFragment;
    "getCampaign(uint256)": FunctionFragment;
    "getCampaignByAddressLength(address)": FunctionFragment;
    "getCampaignCreatedByAddress(address)": FunctionFragment;
    "getCampaignMetadata(bytes32)": FunctionFragment;
    "getCampaignsLength()": FunctionFragment;
    "getClaimed(bytes32,uint8)": FunctionFragment;
    "getReferral(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSchedule(bytes32)": FunctionFragment;
    "getTokensAllowed()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "removeReferral(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "scheduleToCampaign(bytes32)": FunctionFragment;
    "schedules(bytes32)": FunctionFragment;
    "setBuyPerWallet(bytes32,address,uint256)": FunctionFragment;
    "setClaimed(bytes32,uint8,uint256)": FunctionFragment;
    "setReferral(bytes32,(address,uint256))": FunctionFragment;
    "setSchedule(bytes32,(bool,bool,address,uint256,uint256,bytes32,uint256,uint256,address[],uint256[],(address,uint8),uint256,uint256,uint256))": FunctionFragment;
    "setTokensAllowed(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateCampaignMetadata(bytes32,string)": FunctionFragment;
    "updateReferralIndex(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WRITER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCampaign",
    values: [{ campaignId: BytesLike; phases: BytesLike[]; metadata: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignsByAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignsCreatedByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPerWallet",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyWalletCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignByAddressLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignCreatedByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferral",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleToCampaign",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schedules",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyPerWallet",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimed",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferral",
    values: [BytesLike, { referral: string; referralFee: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setSchedule",
    values: [
      BytesLike,
      {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokensAllowed",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaignMetadata",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferralIndex",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WRITER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignsCreatedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyWalletCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignByAddressLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignCreatedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scheduleToCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schedules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBuyPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokensAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaignMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferralIndex",
    data: BytesLike
  ): Result;

  events: {
    "CampaignCreated(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type CampaignCreatedEvent = TypedEvent<
  [string, BigNumber] & { from: string; campaignIndex: BigNumber }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class EternalStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EternalStorageInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WRITER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addCampaign(
      value: { campaignId: BytesLike; phases: BytesLike[]; metadata: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    campaignsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { campaignIndex: BigNumber; userType: number }
    >;

    campaignsCreatedByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyPerWallet(
      scheduleID: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyWalletCount(
      scheduleID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCampaign(
      record: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string[], string] & {
          campaignId: string;
          phases: string[];
          metadata: string;
        }
      ]
    >;

    getCampaignByAddressLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCampaignCreatedByAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCampaignMetadata(
      campaignId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCampaignsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimed(
      scheduleID: BytesLike,
      userType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReferral(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { referral: string; referralFee: BigNumber }]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSchedule(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          [string, number] & { token: string; assetType: number },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          initialized: boolean;
          revoked: boolean;
          owner: string;
          start: BigNumber;
          duration: BigNumber;
          merkleRoot: string;
          amountTotal: BigNumber;
          released: BigNumber;
          lotToken: string[];
          lotSize: BigNumber[];
          paymentAsset: [string, number] & { token: string; assetType: number };
          pricePerLot: BigNumber;
          rollFee: BigNumber;
          maxBuyPerWallet: BigNumber;
        }
      ]
    >;

    getTokensAllowed(overrides?: CallOverrides): Promise<[string[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenAllowed(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    removeReferral(
      record: BytesLike,
      oldReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scheduleToCampaign(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        campaignId: string;
        campaignIndex: BigNumber;
        scheduleIndex: BigNumber;
      }
    >;

    schedules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        [string, number] & { token: string; assetType: number },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumber;
        duration: BigNumber;
        merkleRoot: string;
        amountTotal: BigNumber;
        released: BigNumber;
        paymentAsset: [string, number] & { token: string; assetType: number };
        pricePerLot: BigNumber;
        rollFee: BigNumber;
        maxBuyPerWallet: BigNumber;
      }
    >;

    setBuyPerWallet(
      scheduleID: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimed(
      scheduleID: BytesLike,
      userType: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferral(
      record: BytesLike,
      value: { referral: string; referralFee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSchedule(
      record: BytesLike,
      value: {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokensAllowed(
      token: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateCampaignMetadata(
      campaignId: BytesLike,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReferralIndex(
      referral: string,
      campaignIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  WRITER_ROLE(overrides?: CallOverrides): Promise<string>;

  addCampaign(
    value: { campaignId: BytesLike; phases: BytesLike[]; metadata: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  campaignsByAddress(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { campaignIndex: BigNumber; userType: number }
  >;

  campaignsCreatedByAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyPerWallet(
    scheduleID: BytesLike,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyWalletCount(
    scheduleID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCampaign(
    record: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string[], string] & {
      campaignId: string;
      phases: string[];
      metadata: string;
    }
  >;

  getCampaignByAddressLength(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCampaignCreatedByAddress(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCampaignMetadata(
    campaignId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getCampaignsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimed(
    scheduleID: BytesLike,
    userType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReferral(
    record: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { referral: string; referralFee: BigNumber }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSchedule(
    record: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string[],
      BigNumber[],
      [string, number] & { token: string; assetType: number },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      initialized: boolean;
      revoked: boolean;
      owner: string;
      start: BigNumber;
      duration: BigNumber;
      merkleRoot: string;
      amountTotal: BigNumber;
      released: BigNumber;
      lotToken: string[];
      lotSize: BigNumber[];
      paymentAsset: [string, number] & { token: string; assetType: number };
      pricePerLot: BigNumber;
      rollFee: BigNumber;
      maxBuyPerWallet: BigNumber;
    }
  >;

  getTokensAllowed(overrides?: CallOverrides): Promise<string[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenAllowed(addr: string, overrides?: CallOverrides): Promise<boolean>;

  removeReferral(
    record: BytesLike,
    oldReferral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scheduleToCampaign(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      campaignId: string;
      campaignIndex: BigNumber;
      scheduleIndex: BigNumber;
    }
  >;

  schedules(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      [string, number] & { token: string; assetType: number },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      initialized: boolean;
      revoked: boolean;
      owner: string;
      start: BigNumber;
      duration: BigNumber;
      merkleRoot: string;
      amountTotal: BigNumber;
      released: BigNumber;
      paymentAsset: [string, number] & { token: string; assetType: number };
      pricePerLot: BigNumber;
      rollFee: BigNumber;
      maxBuyPerWallet: BigNumber;
    }
  >;

  setBuyPerWallet(
    scheduleID: BytesLike,
    addr: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimed(
    scheduleID: BytesLike,
    userType: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferral(
    record: BytesLike,
    value: { referral: string; referralFee: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSchedule(
    record: BytesLike,
    value: {
      initialized: boolean;
      revoked: boolean;
      owner: string;
      start: BigNumberish;
      duration: BigNumberish;
      merkleRoot: BytesLike;
      amountTotal: BigNumberish;
      released: BigNumberish;
      lotToken: string[];
      lotSize: BigNumberish[];
      paymentAsset: { token: string; assetType: BigNumberish };
      pricePerLot: BigNumberish;
      rollFee: BigNumberish;
      maxBuyPerWallet: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokensAllowed(
    token: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateCampaignMetadata(
    campaignId: BytesLike,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReferralIndex(
    referral: string,
    campaignIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    WRITER_ROLE(overrides?: CallOverrides): Promise<string>;

    addCampaign(
      value: { campaignId: BytesLike; phases: BytesLike[]; metadata: string },
      overrides?: CallOverrides
    ): Promise<void>;

    campaignsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { campaignIndex: BigNumber; userType: number }
    >;

    campaignsCreatedByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPerWallet(
      scheduleID: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyWalletCount(
      scheduleID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaign(
      record: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], string] & {
        campaignId: string;
        phases: string[];
        metadata: string;
      }
    >;

    getCampaignByAddressLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignCreatedByAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignMetadata(
      campaignId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getCampaignsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimed(
      scheduleID: BytesLike,
      userType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferral(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { referral: string; referralFee: BigNumber }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSchedule(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        [string, number] & { token: string; assetType: number },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumber;
        duration: BigNumber;
        merkleRoot: string;
        amountTotal: BigNumber;
        released: BigNumber;
        lotToken: string[];
        lotSize: BigNumber[];
        paymentAsset: [string, number] & { token: string; assetType: number };
        pricePerLot: BigNumber;
        rollFee: BigNumber;
        maxBuyPerWallet: BigNumber;
      }
    >;

    getTokensAllowed(overrides?: CallOverrides): Promise<string[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenAllowed(addr: string, overrides?: CallOverrides): Promise<boolean>;

    removeReferral(
      record: BytesLike,
      oldReferral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    scheduleToCampaign(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        campaignId: string;
        campaignIndex: BigNumber;
        scheduleIndex: BigNumber;
      }
    >;

    schedules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        [string, number] & { token: string; assetType: number },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumber;
        duration: BigNumber;
        merkleRoot: string;
        amountTotal: BigNumber;
        released: BigNumber;
        paymentAsset: [string, number] & { token: string; assetType: number };
        pricePerLot: BigNumber;
        rollFee: BigNumber;
        maxBuyPerWallet: BigNumber;
      }
    >;

    setBuyPerWallet(
      scheduleID: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimed(
      scheduleID: BytesLike,
      userType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferral(
      record: BytesLike,
      value: { referral: string; referralFee: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setSchedule(
      record: BytesLike,
      value: {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setTokensAllowed(
      token: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateCampaignMetadata(
      campaignId: BytesLike,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferralIndex(
      referral: string,
      campaignIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CampaignCreated(address,uint256)"(
      from?: string | null,
      campaignIndex?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; campaignIndex: BigNumber }
    >;

    CampaignCreated(
      from?: string | null,
      campaignIndex?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; campaignIndex: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WRITER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addCampaign(
      value: { campaignId: BytesLike; phases: BytesLike[]; metadata: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    campaignsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignsCreatedByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPerWallet(
      scheduleID: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyWalletCount(
      scheduleID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaign(
      record: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignByAddressLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignCreatedByAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignMetadata(
      campaignId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimed(
      scheduleID: BytesLike,
      userType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferral(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedule(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeReferral(
      record: BytesLike,
      oldReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scheduleToCampaign(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    schedules(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setBuyPerWallet(
      scheduleID: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimed(
      scheduleID: BytesLike,
      userType: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferral(
      record: BytesLike,
      value: { referral: string; referralFee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSchedule(
      record: BytesLike,
      value: {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokensAllowed(
      token: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCampaignMetadata(
      campaignId: BytesLike,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReferralIndex(
      referral: string,
      campaignIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WRITER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCampaign(
      value: { campaignId: BytesLike; phases: BytesLike[]; metadata: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    campaignsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignsCreatedByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyPerWallet(
      scheduleID: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyWalletCount(
      scheduleID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaign(
      record: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignByAddressLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignCreatedByAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignMetadata(
      campaignId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimed(
      scheduleID: BytesLike,
      userType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferral(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedule(
      record: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReferral(
      record: BytesLike,
      oldReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scheduleToCampaign(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    schedules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBuyPerWallet(
      scheduleID: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimed(
      scheduleID: BytesLike,
      userType: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferral(
      record: BytesLike,
      value: { referral: string; referralFee: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSchedule(
      record: BytesLike,
      value: {
        initialized: boolean;
        revoked: boolean;
        owner: string;
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        released: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        paymentAsset: { token: string; assetType: BigNumberish };
        pricePerLot: BigNumberish;
        rollFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokensAllowed(
      token: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCampaignMetadata(
      campaignId: BytesLike,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReferralIndex(
      referral: string,
      campaignIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
