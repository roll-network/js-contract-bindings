/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  MembershipsErrors,
  MembershipsErrorsInterface,
} from "../MembershipsErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minRollFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxFee",
        type: "uint256",
      },
    ],
    name: "ErrorME01InvalidFee",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME02TokenNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME03NotEnoughTokens",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME04NotEnoughPhases",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME05OnlyOwnerAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME06ScheduleDoesNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME07ScheduleRevoked",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME08ScheduleNotActive",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME09ScheduleNotFinished",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME10ActionAllowlisted",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME11TransferError",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME12IndexOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME13InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME14BetaPeriodAlreadyFinish",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME15InvalidDate",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME16InvalidDuration",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME17InvalidPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME18LotArrayLengthMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME19NotEnoughEth",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME20InvalidReferral",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME21InvalidReferralFee",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME22MaxBuyPerWalletExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME23TotalClaimedError",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME24InvalidProof",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME25ScheduleNotFinishedOrSoldOut",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME26OnlyMembershipsImpl",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME27TotalAmountExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME28InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorME29InvalidMaxBuyPerWallet",
    type: "error",
  },
];

export class MembershipsErrors__factory {
  static readonly abi = _abi;
  static createInterface(): MembershipsErrorsInterface {
    return new utils.Interface(_abi) as MembershipsErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MembershipsErrors {
    return new Contract(address, _abi, signerOrProvider) as MembershipsErrors;
  }
}
