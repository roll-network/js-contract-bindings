/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MembershipsInterface extends ethers.utils.Interface {
  functions: {
    "buy(bytes32,uint256)": FunctionFragment;
    "buyWithAllowlist(bytes32,uint256,bytes32[])": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "claimReferral(bytes32)": FunctionFragment;
    "claimRoll(bytes32)": FunctionFragment;
    "claimUnsoldTokens(bytes32)": FunctionFragment;
    "computeScheduleIdForAddressAndIndex(address,uint256,uint256)": FunctionFragment;
    "computeUnsoldLots(bytes32)": FunctionFragment;
    "createCampaign(tuple[],string)": FunctionFragment;
    "doTransfer(uint8,address,address,address,uint256)": FunctionFragment;
    "getMinRollFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "setAllowlist(bytes32,bytes32)": FunctionFragment;
    "setEternalStorageAddress(address)": FunctionFragment;
    "setMembershipsImplAddress(address)": FunctionFragment;
    "setMinRollFee(uint256)": FunctionFragment;
    "setRollWallet(address)": FunctionFragment;
    "setTokenAllow(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferScheduleOwner(bytes32,address)": FunctionFragment;
    "updateCampaignMetadata(bytes32,string)": FunctionFragment;
    "updateReferral(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buy",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithAllowlist",
    values: [BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "claimReferral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoll",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnsoldTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeScheduleIdForAddressAndIndex",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeUnsoldLots",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "doTransfer",
    values: [BigNumberish, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinRollFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setAllowlist",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEternalStorageAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipsImplAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRollFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRollWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAllow",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferScheduleOwner",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaignMetadata",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferral",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimRoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimUnsoldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeScheduleIdForAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeUnsoldLots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doTransfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinRollFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEternalStorageAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipsImplAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRollFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRollWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAllow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferScheduleOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaignMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferral",
    data: BytesLike
  ): Result;

  events: {
    "EventEternalStorageUpdated(address,address)": EventFragment;
    "EventMembershipsImplUpdated(address,address)": EventFragment;
    "EventMinRollFeeUpdated(uint256)": EventFragment;
    "EventReferralUpdated(address,bytes32,address)": EventFragment;
    "EventRollWalletUpdated(address,address)": EventFragment;
    "EventScheduleCreated(address,bytes32)": EventFragment;
    "EventScheduleCreatedWithToken(address,bytes32,address)": EventFragment;
    "EventScheduleReferralSet(address,bytes32,address,uint256)": EventFragment;
    "EventTokenAllowedUpdated(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Revoked(bytes32)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventEternalStorageUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EventMembershipsImplUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventMinRollFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventReferralUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventRollWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventScheduleCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EventScheduleCreatedWithToken"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventScheduleReferralSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventTokenAllowedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type EventEternalStorageUpdatedEvent = TypedEvent<
  [string, string] & { from: string; addr: string }
>;

export type EventMembershipsImplUpdatedEvent = TypedEvent<
  [string, string] & { from: string; addr: string }
>;

export type EventMinRollFeeUpdatedEvent = TypedEvent<
  [BigNumber] & { newMinRollFee: BigNumber }
>;

export type EventReferralUpdatedEvent = TypedEvent<
  [string, string, string] & {
    from: string;
    scheduleId: string;
    newReferral: string;
  }
>;

export type EventRollWalletUpdatedEvent = TypedEvent<
  [string, string] & { from: string; addr: string }
>;

export type EventScheduleCreatedEvent = TypedEvent<
  [string, string] & { from: string; scheduleId: string }
>;

export type EventScheduleCreatedWithTokenEvent = TypedEvent<
  [string, string, string] & { from: string; scheduleId: string; token: string }
>;

export type EventScheduleReferralSetEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    sender: string;
    scheduleId: string;
    referral: string;
    referralFee: BigNumber;
  }
>;

export type EventTokenAllowedUpdatedEvent = TypedEvent<
  [string, string, boolean] & { from: string; token: string; value: boolean }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RevokedEvent = TypedEvent<[string] & { scheduleId: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class Memberships extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MembershipsInterface;

  functions: {
    buy(
      scheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyWithAllowlist(
      scheduleId: BytesLike,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReferral(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRoll(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimUnsoldTokens(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeUnsoldLots(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createCampaign(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      }[],
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doTransfer(
      assetType: BigNumberish,
      tokenAddress: string,
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinRollFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEternalStorageAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMembershipsImplAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinRollFee(
      newMinRollFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRollWallet(
      newRollWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAllow(
      token: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCampaignMetadata(
      campaignId: BytesLike,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReferral(
      scheduleId: BytesLike,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    scheduleId: BytesLike,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyWithAllowlist(
    scheduleId: BytesLike,
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReferral(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRoll(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimUnsoldTokens(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeScheduleIdForAddressAndIndex(
    holder: string,
    index: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  computeUnsoldLots(
    scheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createCampaign(
    params: {
      start: BigNumberish;
      duration: BigNumberish;
      merkleRoot: BytesLike;
      amountTotal: BigNumberish;
      lotToken: string[];
      lotSize: BigNumberish[];
      pricePerLot: BigNumberish;
      paymentAsset: { token: string; assetType: BigNumberish };
      rollFee: BigNumberish;
      referral: string;
      referralFee: BigNumberish;
      maxBuyPerWallet: BigNumberish;
    }[],
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doTransfer(
    assetType: BigNumberish,
    tokenAddress: string,
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinRollFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowlist(
    scheduleId: BytesLike,
    root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEternalStorageAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMembershipsImplAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinRollFee(
    newMinRollFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRollWallet(
    newRollWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAllow(
    token: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferScheduleOwner(
    scheduleId: BytesLike,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCampaignMetadata(
    campaignId: BytesLike,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReferral(
    scheduleId: BytesLike,
    referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      scheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyWithAllowlist(
      scheduleId: BytesLike,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(scheduleId: BytesLike, overrides?: CallOverrides): Promise<void>;

    claimReferral(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRoll(scheduleId: BytesLike, overrides?: CallOverrides): Promise<void>;

    claimUnsoldTokens(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    computeScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    computeUnsoldLots(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      }[],
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    doTransfer(
      assetType: BigNumberish,
      tokenAddress: string,
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinRollFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(scheduleId: BytesLike, overrides?: CallOverrides): Promise<void>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setEternalStorageAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMembershipsImplAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRollFee(
      newMinRollFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRollWallet(
      newRollWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAllow(
      token: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCampaignMetadata(
      campaignId: BytesLike,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferral(
      scheduleId: BytesLike,
      referral: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EventEternalStorageUpdated(address,address)"(
      from?: string | null,
      addr?: string | null
    ): TypedEventFilter<[string, string], { from: string; addr: string }>;

    EventEternalStorageUpdated(
      from?: string | null,
      addr?: string | null
    ): TypedEventFilter<[string, string], { from: string; addr: string }>;

    "EventMembershipsImplUpdated(address,address)"(
      from?: string | null,
      addr?: string | null
    ): TypedEventFilter<[string, string], { from: string; addr: string }>;

    EventMembershipsImplUpdated(
      from?: string | null,
      addr?: string | null
    ): TypedEventFilter<[string, string], { from: string; addr: string }>;

    "EventMinRollFeeUpdated(uint256)"(
      newMinRollFee?: null
    ): TypedEventFilter<[BigNumber], { newMinRollFee: BigNumber }>;

    EventMinRollFeeUpdated(
      newMinRollFee?: null
    ): TypedEventFilter<[BigNumber], { newMinRollFee: BigNumber }>;

    "EventReferralUpdated(address,bytes32,address)"(
      from?: string | null,
      scheduleId?: BytesLike | null,
      newReferral?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; scheduleId: string; newReferral: string }
    >;

    EventReferralUpdated(
      from?: string | null,
      scheduleId?: BytesLike | null,
      newReferral?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; scheduleId: string; newReferral: string }
    >;

    "EventRollWalletUpdated(address,address)"(
      from?: string | null,
      addr?: string | null
    ): TypedEventFilter<[string, string], { from: string; addr: string }>;

    EventRollWalletUpdated(
      from?: string | null,
      addr?: string | null
    ): TypedEventFilter<[string, string], { from: string; addr: string }>;

    "EventScheduleCreated(address,bytes32)"(
      from?: string | null,
      scheduleId?: BytesLike | null
    ): TypedEventFilter<[string, string], { from: string; scheduleId: string }>;

    EventScheduleCreated(
      from?: string | null,
      scheduleId?: BytesLike | null
    ): TypedEventFilter<[string, string], { from: string; scheduleId: string }>;

    "EventScheduleCreatedWithToken(address,bytes32,address)"(
      from?: string | null,
      scheduleId?: BytesLike | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; scheduleId: string; token: string }
    >;

    EventScheduleCreatedWithToken(
      from?: string | null,
      scheduleId?: BytesLike | null,
      token?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; scheduleId: string; token: string }
    >;

    "EventScheduleReferralSet(address,bytes32,address,uint256)"(
      sender?: string | null,
      scheduleId?: BytesLike | null,
      referral?: string | null,
      referralFee?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        sender: string;
        scheduleId: string;
        referral: string;
        referralFee: BigNumber;
      }
    >;

    EventScheduleReferralSet(
      sender?: string | null,
      scheduleId?: BytesLike | null,
      referral?: string | null,
      referralFee?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        sender: string;
        scheduleId: string;
        referral: string;
        referralFee: BigNumber;
      }
    >;

    "EventTokenAllowedUpdated(address,address,bool)"(
      from?: string | null,
      token?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; token: string; value: boolean }
    >;

    EventTokenAllowedUpdated(
      from?: string | null,
      token?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; token: string; value: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Revoked(bytes32)"(
      scheduleId?: BytesLike | null
    ): TypedEventFilter<[string], { scheduleId: string }>;

    Revoked(
      scheduleId?: BytesLike | null
    ): TypedEventFilter<[string], { scheduleId: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    buy(
      scheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyWithAllowlist(
      scheduleId: BytesLike,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReferral(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRoll(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimUnsoldTokens(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeUnsoldLots(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      }[],
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doTransfer(
      assetType: BigNumberish,
      tokenAddress: string,
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinRollFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEternalStorageAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMembershipsImplAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinRollFee(
      newMinRollFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRollWallet(
      newRollWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAllow(
      token: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCampaignMetadata(
      campaignId: BytesLike,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReferral(
      scheduleId: BytesLike,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      scheduleId: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyWithAllowlist(
      scheduleId: BytesLike,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReferral(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRoll(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimUnsoldTokens(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeScheduleIdForAddressAndIndex(
      holder: string,
      index: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeUnsoldLots(
      scheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCampaign(
      params: {
        start: BigNumberish;
        duration: BigNumberish;
        merkleRoot: BytesLike;
        amountTotal: BigNumberish;
        lotToken: string[];
        lotSize: BigNumberish[];
        pricePerLot: BigNumberish;
        paymentAsset: { token: string; assetType: BigNumberish };
        rollFee: BigNumberish;
        referral: string;
        referralFee: BigNumberish;
        maxBuyPerWallet: BigNumberish;
      }[],
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doTransfer(
      assetType: BigNumberish,
      tokenAddress: string,
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinRollFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowlist(
      scheduleId: BytesLike,
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEternalStorageAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMembershipsImplAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinRollFee(
      newMinRollFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRollWallet(
      newRollWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAllow(
      token: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferScheduleOwner(
      scheduleId: BytesLike,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCampaignMetadata(
      campaignId: BytesLike,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReferral(
      scheduleId: BytesLike,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
