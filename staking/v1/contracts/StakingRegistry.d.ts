/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingRegistryInterface extends ethers.utils.Interface {
  functions: {
    "assignOwnerToContract(address,address,address)": FunctionFragment;
    "authorisedCallers(address)": FunctionFragment;
    "contractCountPerOwner(address)": FunctionFragment;
    "contractToOwner(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "getIndexArray(address[],address)": FunctionFragment;
    "ownerToContracts(address,uint256)": FunctionFragment;
    "setCaller(address,bool)": FunctionFragment;
    "setController(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assignOwnerToContract",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorisedCallers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractCountPerOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractToOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexArray",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToContracts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCaller",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignOwnerToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorisedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractCountPerOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIndexArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerToContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCaller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;

  events: {
    "CallerUpdated(address,bool)": EventFragment;
    "ControllerUpdated(address)": EventFragment;
    "NewStakingContractOwner(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingContractOwner"): EventFragment;
}

export type CallerUpdatedEvent = TypedEvent<
  [string, boolean] & { newCaller: string; newValue: boolean }
>;

export type ControllerUpdatedEvent = TypedEvent<
  [string] & { newController: string }
>;

export type NewStakingContractOwnerEvent = TypedEvent<
  [string, string, string] & {
    stakingContract: string;
    newOwner: string;
    previousOwner: string;
  }
>;

export class StakingRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingRegistryInterface;

  functions: {
    assignOwnerToContract(
      _stakingContract: string,
      _owner: string,
      _previousOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorisedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractCountPerOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contractToOwner(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    getIndexArray(
      _array: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    ownerToContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setCaller(
      _caller: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assignOwnerToContract(
    _stakingContract: string,
    _owner: string,
    _previousOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorisedCallers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  contractCountPerOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contractToOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  getIndexArray(
    _array: string[],
    value: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  ownerToContracts(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setCaller(
    _caller: string,
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    _newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assignOwnerToContract(
      _stakingContract: string,
      _owner: string,
      _previousOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    authorisedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contractCountPerOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractToOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    getIndexArray(
      _array: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    ownerToContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setCaller(
      _caller: string,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _newController: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CallerUpdated(address,bool)"(
      newCaller?: string | null,
      newValue?: null
    ): TypedEventFilter<
      [string, boolean],
      { newCaller: string; newValue: boolean }
    >;

    CallerUpdated(
      newCaller?: string | null,
      newValue?: null
    ): TypedEventFilter<
      [string, boolean],
      { newCaller: string; newValue: boolean }
    >;

    "ControllerUpdated(address)"(
      newController?: string | null
    ): TypedEventFilter<[string], { newController: string }>;

    ControllerUpdated(
      newController?: string | null
    ): TypedEventFilter<[string], { newController: string }>;

    "NewStakingContractOwner(address,address,address)"(
      stakingContract?: string | null,
      newOwner?: string | null,
      previousOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { stakingContract: string; newOwner: string; previousOwner: string }
    >;

    NewStakingContractOwner(
      stakingContract?: string | null,
      newOwner?: string | null,
      previousOwner?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { stakingContract: string; newOwner: string; previousOwner: string }
    >;
  };

  estimateGas: {
    assignOwnerToContract(
      _stakingContract: string,
      _owner: string,
      _previousOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorisedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractCountPerOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractToOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexArray(
      _array: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerToContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCaller(
      _caller: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignOwnerToContract(
      _stakingContract: string,
      _owner: string,
      _previousOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorisedCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractCountPerOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractToOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndexArray(
      _array: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerToContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCaller(
      _caller: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
