/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Registry, RegistryInterface } from "../Registry";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    name: "getIndexSymbol",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "rolodex",
    outputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        internalType: "address",
        name: "vestingBeneficiary",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "initialPercentage",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "vestingPeriodInWeeks",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610720806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063469dfdc11461003b578063867954cf14610074575b600080fd5b6100556004803603810190610050919061031b565b6100a4565b60405161006b9a99989796959493929190610415565b60405180910390f35b61008e60048036038101906100899190610348565b61028f565b60405161009b91906104bf565b60405180910390f35b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546100ed906105ed565b80601f0160208091040260200160405190810160405280929190818152602001828054610119906105ed565b80156101665780601f1061013b57610100808354040283529160200191610166565b820191906000526020600020905b81548152906001019060200180831161014957829003601f168201915b50505050509080600201805461017b906105ed565b80601f01602080910402602001604051908101604052809291908181526020018280546101a7906105ed565b80156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b5050505050908060030160009054906101000a900460ff16908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160149054906101000a900460ff16908060070154908060080160009054906101000a900460ff1690508a565b6000919050565b60006102a96102a4846104ff565b6104da565b9050828152602081018484840111156102c5576102c46106b3565b5b6102d08482856105ab565b509392505050565b6000813590506102e7816106d3565b92915050565b600082601f830112610302576103016106ae565b5b8135610312848260208601610296565b91505092915050565b600060208284031215610331576103306106bd565b5b600061033f848285016102d8565b91505092915050565b60006020828403121561035e5761035d6106bd565b5b600082013567ffffffffffffffff81111561037c5761037b6106b8565b5b610388848285016102ed565b91505092915050565b61039a8161054c565b82525050565b6103a98161055e565b82525050565b6103b88161056a565b82525050565b60006103c982610530565b6103d3818561053b565b93506103e38185602086016105ba565b6103ec816106c2565b840191505092915050565b61040081610594565b82525050565b61040f8161059e565b82525050565b60006101408201905061042b600083018d610391565b818103602083015261043d818c6103be565b90508181036040830152610451818b6103be565b9050610460606083018a610406565b61046d60808301896103f7565b61047a60a0830188610391565b61048760c0830187610391565b61049460e0830186610406565b6104a26101008301856103f7565b6104b06101208301846103a0565b9b9a5050505050505050505050565b60006020820190506104d460008301846103af565b92915050565b60006104e46104f5565b90506104f0828261061f565b919050565b6000604051905090565b600067ffffffffffffffff82111561051a5761051961067f565b5b610523826106c2565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061055782610574565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156105d85780820151818401526020810190506105bd565b838111156105e7576000848401525b50505050565b6000600282049050600182168061060557607f821691505b6020821081141561061957610618610650565b5b50919050565b610628826106c2565b810181811067ffffffffffffffff821117156106475761064661067f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6106dc8161056a565b81146106e757600080fd5b5056fea26469706673582212202c070d51857dc932f48cf7a09cc5c5fef59bf8cca4952c4736b4e04c4b4fd15c64736f6c63430008070033";

export class Registry__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Registry> {
    return super.deploy(overrides || {}) as Promise<Registry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}
